If you already have the latest Python installed and want to avoid installing multiple Python versions 
or additional heavy distributions like Anaconda, you can directly install and set up Jupyter with your 
existing Python installation. Hereâ€™s how you can do it:



Step 1: Verify Your Python Installation
Open a Command Prompt (Win + R, type cmd, and hit Enter).

Run:
    python --version

This ensures Python is installed and accessible. You should see the version output.

Ensure pip is installed:
    pip --version

If pip is missing, run:
    python -m ensurepip --upgrade



Step 2: Install Jupyter (takes lots of time, so, be patient)
Install Jupyter using pip:
    pip install notebook

Confirm the installation:
    jupyter --version

You should see the installed version of Jupyter Notebook.




Step 3: Launch Jupyter Notebook

Navigate to the folder where you want to save your notebooks:
    cd path\to\your\working\directory
Start the Jupyter Notebook server:
    jupyter notebook

A web browser will open with the Jupyter interface. If it doesnâ€™t open automatically, copy the URL displayed in the terminal (e.g., http://localhost:8888) and paste it into your browser.




Step 4: Install Popular Data Analysis Libraries

Use pip to install libraries youâ€™ll commonly use in data analysis:
    pip install numpy pandas matplotlib seaborn

These libraries are essential for data manipulation and visualization.

To work with Excel add this library:
    pip install openpyxl

For working with Jupyter, also install:
    pip install ipykernel



Step 5: Create and Use a Python Kernel in Jupyter

If you have multiple Python installations or environments, specify the one youâ€™re using by creating a new kernel:

Add your Python installation to Jupyter:
    python -m ipykernel install --user --name=python3

When creating a new notebook in Jupyter, select the "Python 3" kernel.



Step 6: Save Space and Avoid Heavy Dependencies

Instead of installing additional distributions like Anaconda, stick to installing only what you need via pip.
If a specific package requires heavy dependencies, install it individually (e.g., 
    pip install scikit-learn
 for machine learning).



Step 7: Optional - Install JupyterLab

JupyterLab is an advanced interface for Jupyter Notebook. To install it:
    pip install jupyterlab

Run it with:
    jupyter lab



Summary of Advantages for Your Setup
Lightweight: No need for Anaconda.
Simple: Only one Python version.
Cost-free: All tools are open-source.
Youâ€™re ready to start working with Jupyter for data analysis! Let me know if you need help setting up your first notebook. ðŸ˜Š



EXTRAS:

Keep the Notebook Clean
To avoid committing unwanted outputs (like plots or large cell outputs), you can clean your notebooks
before staging them for Git. Use one of these approaches:

Manually Clear Outputs:

Open the notebook in Jupyter and use Cell > All Output > Clear.
Save the notebook before committing.


Automate with nbstripout:

Install nbstripout:
    pip install nbstripout

Set it up for your repository:
    nbstripout --install

This strips outputs automatically during git add.
